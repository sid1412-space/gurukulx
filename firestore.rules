
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return request.auth.token.email == 'gurukulxconnect@yahoo.com';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isTutor() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'tutor';
    }

    match /users/{userId} {
      // Admins can do anything. Authenticated users can read any profile.
      allow read: if isAdmin() || isAuthenticated();
      // Users can update their own profile. Admins can update any.
      allow update: if isAdmin() || isOwner(userId);
      // Users can create their own doc. Admins can create any (for seeding/testing).
      allow create: if isAdmin() || isOwner(userId);
      // Users can delete their own account. Admins can delete any.
      allow delete: if isAdmin() || isOwner(userId);
    }

    match /sessions/{sessionId} {
        // Admins can read all sessions. Tutors and Students can read their own sessions.
        allow read: if isAdmin() || resource.data.tutorId == request.auth.uid || resource.data.studentId == request.auth.uid;
        // Students can create sessions.
        allow create: if resource.data.studentId == request.auth.uid;
        // Students can update sessions to add ratings.
        allow update: if resource.data.studentId == request.auth.uid;
    }

    match /rechargeRequests/{rechargeId} {
        // Admins can manage all requests. Students can create and read their own.
        allow read: if isAdmin() || resource.data.studentId == request.auth.uid;
        allow create: if resource.data.studentId == request.auth.uid;
        allow update, delete: if isAdmin();
    }
    
    match /payoutRequests/{payoutRequestId} {
        // Admins can manage all requests. Tutors can create and read their own.
        allow read, create: if isAdmin() || isTutor();
        allow update, delete: if isAdmin();
    }
    
    match /payouts/{payoutId} {
      // Admins can manage all payouts. Tutors can read their own.
      allow read: if isAdmin() || resource.data.tutorId == request.auth.uid;
      allow create, update, delete: if isAdmin();
    }

    match /sessionRequests/{requestId} {
      // Admins can manage all requests.
      allow read, write: if isAdmin();
      // Students can create requests.
      allow create: if request.resource.data.studentId == request.auth.uid;
      // Tutors can listen for requests made to them.
      allow read: if isTutor() && get(/databases/$(database)/documents/sessionRequests/$(requestId)).data.tutorId == request.auth.uid;
      // Tutors can update (accept) or delete (reject) requests.
      allow update, delete: if isTutor() && get(/databases/$(database)/documents/sessionRequests/$(requestId)).data.tutorId == request.auth.uid;
    }
  }
}
