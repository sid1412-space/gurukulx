
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    function isAdmin() {
        // This email is the designated admin for the platform.
        return isAuth() && request.auth.token.email == 'gurukulxconnect@yahoo.com';
    }

    // Default deny all access to prevent unauthorized actions.
    match /{document=**} {
      allow read, write: if false;
    }

    // Admins have unrestricted read and write access to all data.
    match /{document=**} {
        allow read, write: if isAdmin();
    }

    // Users Collection Rules
    match /users/{userId} {
      // Any authenticated user can read tutor profiles. Students can't read other student profiles.
      allow get: if isAuth() && (resource.data.role == 'tutor' || isUser(userId));

      // Any authenticated user can query/list the tutors.
      allow list: if isAuth();

      // Any authenticated user can create their own user document upon sign-up.
      allow create: if isAuth();

      // A user can only update their own profile.
      allow update: if isUser(userId) || isAdmin();

      // Only an admin can delete a user account.
      allow delete: if isAdmin();
    }

    // Session Requests Collection Rules
    match /sessionRequests/{requestId} {
        // Students can create requests for a session.
        allow create: if isAuth() && request.resource.data.studentId == request.auth.uid;

        // The specific tutor or student involved can read the request.
        allow read: if isAuth() && (resource.data.tutorId == request.auth.uid || resource.data.studentId == request.auth.uid);

        // The tutor can update (accept/reject), and the student can delete (cancel).
        allow update, delete: if isAuth() && (resource.data.tutorId == request.auth.uid || resource.data.studentId == request.auth.uid);
    }

    // Financial Collections Rules (Recharge, Payouts)
    match /rechargeRequests/{requestId} {
        // Students can create recharge requests.
        allow create: if isAuth();
        // Only admins can view and process them.
        allow read, update: if isAdmin();
    }

     match /payoutRequests/{requestId} {
        // Tutors can create payout requests.
        allow create: if isAuth();
        // Only admins can view and process them.
        allow read, update: if isAdmin();
    }
    
    match /payouts/{payoutId} {
        // A tutor can only read their own payout history.
        allow read: if isAuth() && resource.data.tutorId == request.auth.uid;
    }
  }
}
